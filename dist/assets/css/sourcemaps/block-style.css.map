{"version":3,"sources":["block-style.css","block-style.scss","global/_config.scss"],"names":[],"mappings":"AAAA,gBAAgB;ACEhB,uBAAA;AACA;EAGE,6BAAA;EACA,8BAAA;EAFA,kBAAA;EADA,kBAAA;ADGF;AE6XI;EDjYJ;IAOI,oBAAA;IACA,qBAAA;IACA,gBAAA;IAHA,WAAA;EDKF;AACF;;ACCA;EACE,WAAA;EACA,cAAA;EACA,mBAAA;ADEF;AE+WI;EDpXJ;IAKI,kBAAA;EDIF;AACF;;ACDA;EAOE,0BAAA;EACA,oBAAA;EAHA,YAAA;EAFA,SAAA;EAKA,iBAAA;EADA,uBAAA;EANA,kBAAA;EACA,QAAA;EAIA,gCAAA;EAFA,WAAA;ADQF;;ACDA,gFAAA;AAEA,uBAAA;AACA;EACE,oBAAA;EACA,qBAAA;ADGF;;ACAA;EACE,WAAA;EACA,cAAA;EACA,cAAA;ADGF;;ACAA,oBAAA;AACA;EAGE,uBAAA;EACA,0BAAA;EAFA,0BAAA;EADA,kBAAA;ADMF;;ACAA;EACE,WAAA;EACA,cAAA;EACA,mBAAA;ADGF;AEoUI;ED1UJ;IAKI,kBAAA;EDKF;AACF","file":"block-style.css","sourcesContent":["@charset \"UTF-8\";\n/* --- figureのクラス --- */\n.wp-block-image {\n  position: relative;\n  margin-top: 1.5rem;\n  margin-left: calc(50% - 50vw);\n  margin-right: calc(50% - 50vw);\n}\n@media screen and (min-width: 768px), print {\n  .wp-block-image {\n    width: 100%;\n    margin-left: initial;\n    margin-right: initial;\n    margin-top: 2rem;\n  }\n}\n\n.wp-block-image::before {\n  content: \"\";\n  display: block;\n  padding-top: 53.44%;\n}\n@media screen and (min-width: 768px), print {\n  .wp-block-image::before {\n    padding-top: 66.9%;\n  }\n}\n\n.wp-block-image img {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 100%;\n  height: 100%;\n  transform: translate(-50%, -50%);\n  object-position: center;\n  object-fit: cover;\n}\n\n/* --- 画像: ブロックエディタに縦横比固定を反映させるスタイル(ブロックエディタはHTMLの階層が1つ多いため、テーマのスタイルを打ち消す) --- */\n/* --- figureのクラス --- */\n.block-editor-block-list__block.wp-block-image {\n  margin-left: initial;\n  margin-right: initial;\n}\n\n.block-editor-block-list__block.wp-block-image::before {\n  content: \"\";\n  display: block;\n  padding-top: 0;\n}\n\n/* --- imgの親要素 --- */\n.components-resizable-box__container {\n  position: relative;\n  min-width: 50vw !important;\n  height: auto !important;\n  max-width: 100% !important;\n}\n\n.components-resizable-box__container::before {\n  content: \"\";\n  display: block;\n  padding-top: 53.44%;\n}\n@media screen and (min-width: 768px), print {\n  .components-resizable-box__container::before {\n    padding-top: 66.9%;\n  }\n}","@use 'global' as *;\n\n/* --- figureのクラス --- */\n.wp-block-image {\n  position: relative;\n  margin-top: rem(24);\n  margin-left: calc(50% - 50vw);\n  margin-right: calc(50% - 50vw);\n  @include media(min, md) {\n    width: 100%;\n    margin-left: initial;\n    margin-right: initial;\n    margin-top: rem(32);\n  }\n}\n\n.wp-block-image::before {\n  content: '';\n  display: block;\n  padding-top: 53.44%;\n  @include media(min, md) {\n    padding-top: 66.9%;\n  }\n}\n\n.wp-block-image img {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 100%;\n  height: 100%;\n  transform: translate(-50%, -50%);\n  object-position: center;\n  object-fit: cover;\n}\n\n/* --- 画像: ブロックエディタに縦横比固定を反映させるスタイル(ブロックエディタはHTMLの階層が1つ多いため、テーマのスタイルを打ち消す) --- */\n\n/* --- figureのクラス --- */\n.block-editor-block-list__block.wp-block-image {\n  margin-left: initial;\n  margin-right: initial;\n}\n\n.block-editor-block-list__block.wp-block-image::before {\n  content: '';\n  display: block;\n  padding-top: 0;\n}\n\n/* --- imgの親要素 --- */\n.components-resizable-box__container {\n  position: relative;\n  min-width: 50vw !important;\n  height: auto !important; //画像をリサイズしたときに必要\n  max-width: 100% !important; //画像をリサイズしたときに必要\n}\n\n.components-resizable-box__container::before {\n  content: '';\n  display: block;\n  padding-top: 53.44%;\n  @include media(min, md) {\n    padding-top: 66.9%;\n  }\n}\n","@use 'sass:math';\n@use 'sass:map';\n@use 'sass:color';\n\n// ==========================================================================\n// Config\n// ==========================================================================\n// object/utilityレイヤーにimportantをすべて指定する場合は、\n// trueを、指定しない場合はtrueを指定します。\n$utility-important: true;\n$important: !important;\n\n@if $utility-important == true {\n  $important: !important;\n} @else {\n  $important: null;\n}\n\n// ==========================================================================\n// Variable\n// ==========================================================================\n// ==========================================================================\n// 命名規則\n// ==========================================================================\n// $[element-or-namespace-][property-name][-variant-name][-breakpoint]\n// $[element-or-namespace-]: 指定する要素の名前。全体で使う場合は`global-`、カラーパレットは`color-`。\n// [property-name]: プロパティ値（省略不可）。プロパティ値で表現できない場合は用途を端的に表した名前。\n// [-variant-name]: 状態変化やバリエーションの名前。\n// [-breakpoint]: ブレイクポイントのキー。\n\n// 色の明るい色と暗い色はこちらを使用\n// https://www.peko-step.com/tool/colightness.html\n\n// Color\n// ==========================================================================\n// --- color ---\n$color-black: #000;\n$color-white: #fff;\n$color-blue: #33f;\n$color-sky-blue: #12a4ff;\n$color-red: #c90926;\n$color-pink: #c71a63;\n$color-yellow: #f2edca;\n$color-green: #417967;\n\n// --- color brands---\n$color-twitter: #1da1f2;\n$color-facebook: #3c5a99;\n$color-line: #00b900;\n$color-googlePlus: #dd5144;\n$color-youtube: #da1725;\n$color-instagram: #da1725;\n\n// --- color accent ---\n$color-accent-primary: #bb2000;\n$color-accent-secondary: #8e5b06;\n$color-accent-danger: red;\n$color-accent-warning: #f5ba4e;\n$color-accent-info: #4a90b9;\n$color-accent-important: #d51313;\n\n// --- color base ---\n$color-base-primary: #ffffff;\n$color-base-secondary: #f2f2f2;\n\n// --- color gray ---\n$color-gray-darkest: #191919;\n$color-gray-darker: #333;\n$color-gray-dark: #797979;\n$color-gray: #a3a3a3;\n$color-gray-light: #d1d1d1;\n$color-gray-lighter: #eee;\n$color-gray-lightest: #f9f9f9;\n\n// --- color main base ---\n$color-main-primary-darkest: #000000;\n$color-main-primary-darker: #000000;\n$color-main-primary-dark: #070303;\n$color-main-primary: #1c0c0c;\n$color-main-primary-light: #2a1212;\n$color-main-primary-lighter: #3c1a1a;\n$color-main-primary-lightest: #4e2121;\n\n// --- color sub base ---\n$color-sub-primary-darkest: #000000;\n$color-sub-primary-darker: #080401;\n$color-sub-primary-dark: #1d0f06;\n$color-sub-primary: #331c0b;\n$color-sub-primary-light: #47260f;\n$color-sub-primary-lighter: #5c3214;\n$color-sub-primary-lightest: #703d18;\n\n// --- color base ---\n$base-color-base: $color-base-primary;\n$base-color-sub: $color-sub-primary;\n$base-color-main: $color-main-primary;\n$base-color-accent: $color-accent-primary;\n\n// Link\n// ==========================================================================\n$color-link: #292f89;\n$color-hover: adjust-color($color-link, $alpha: -0.4);\n$color-active: adjust-color($color-link, $alpha: -0.4);\n$color-focus-outline: adjust-color($color-link, $alpha: -0.4);\n$focus-outline-width: 3px;\n$focus-outline: $focus-outline-width solid $color-focus-outline;\n$focus-outline-offset: 2px;\n\n// Typography\n// ==========================================================================\n// --- font-weight ---\n$font-weight-thin: 100 !default;\n$font-weight-light: 300 !default;\n$font-weight-normal: 400 !default;\n$font-weight-medium: 500 !default;\n$font-weight-bold: 700 !default;\n$font-weight-black: 900 !default;\n\n// --- font-size ---\n$font-size-none: rem(10) !default;\n$font-size-xs: rem(12) !default;\n$font-size-sm: rem(14) !default;\n$font-size-md: rem(16) !default;\n$font-size-lg: rem(18) !default;\n$font-size-xl: rem(20) !default;\n\n// --- line-height ---\n$line-height-none: 1 !default;\n$line-height-sm: 1.4 !default;\n$line-height-md: 1.6 !default;\n$line-height-lg: 1.75 !default;\n$line-height-xl: 2 !default;\n\n// --- letter-spacing ---\n$letter-spacing-none: 0 !default;\n$letter-spacing-sm: 0.025em !default;\n$letter-spacing-md: 0.05em !default;\n$letter-spacing-lg: 0.075em !default;\n$letter-spacing-xl: 0.1em !default;\n$letter-spacing-xxl: 0.2em !default;\n\n// --- base-font ---\n$base-font-size-pc: $font-size-md;\n$base-font-size-sp: $font-size-sm;\n$base-font-weight: $font-weight-normal;\n$base-line-height: $line-height-md;\n$base-letter-spacing: $letter-spacing-md;\n$base-font-family-sans: 'Noto Sans JP', sans-serif;\n$base-font-family-serif: 'Noto Serif JP', serif;\n$base-font-family-serif-Vt: 'Noto Serif JP Vertical', serif;\n\n// Layout\n// ==========================================================================\n// --- width ---\n$layout-width-canvas: 1440px;\n$layout-width-inner: 1024px;\n$layout-width-inner-min: 992px;\n$layout-width-tab: 768px;\n$layout-width-single: 686px;\n$layout-width-sp: 360px;\n\n// --- padding ---\n$padding-pc: 32px;\n$padding-sp: 16px;\n\n// --- gap ---\n$base-gap-pc: 8px;\n$base-gap-sp: 8px;\n\n// --- gap ---\n$base-spacing-pc: 20px;\n$base-spacing-sp: 20px;\n\n// --- gutter ---\n$gutter-pc: 10px;\n$gutter-sp: 25px;\n\n// --- col ---\n$col-num: 12;\n$col-width: 70px;\n\n// --- header-height ---\n$header-height-pc: 105px;\n$header-height-sp: 80px;\n\n// --- top-mv-height ---\n$top-mv-height-pc: 280px;\n\n// Dividers\n// ==========================================================================\n$dividers: #231815;\n$dividers-dark: darken($dividers, 10%);\n$dividers-light: rgba($dividers, 0.2);\n\n// Radius\n// ==========================================================================\n$base-radius: 4px !default;\n\n// Border\n// ==========================================================================\n$base-border-width: 2px !default;\n$base-border-color: $color-accent-secondary !default;\n\n// Easing\n// ==========================================================================\n$ease: cubic-bezier(0.25, 0.1, 0.25, 1);\n$linear: cubic-bezier(0, 0, 1, 1);\n$easeIn: cubic-bezier(0.42, 0, 1, 1);\n$easeOut: cubic-bezier(0, 0, 0.58, 1);\n$easeInOut: cubic-bezier(0.42, 0, 0.58, 1);\n\n$easeInSine: cubic-bezier(0.47, 0, 0.745, 0.715);\n$easeOutSine: cubic-bezier(0.39, 0.575, 0.565, 1);\n$easeInOutSine: cubic-bezier(0.445, 0.05, 0.55, 0.95);\n$easeInQuad: cubic-bezier(0.55, 0.085, 0.68, 0.53);\n$easeOutQuad: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n$easeInOutQuad: cubic-bezier(0.455, 0.03, 0.515, 0.955);\n\n$easeInCubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n$easeOutCubic: cubic-bezier(0.215, 0.61, 0.355, 1);\n$easeInOutCubic: cubic-bezier(0.645, 0.045, 0.355, 1);\n$easeInQuart: cubic-bezier(0.895, 0.03, 0.685, 0.22);\n$easeOutQuart: cubic-bezier(0.165, 0.84, 0.44, 1);\n$easeInOutQuart: cubic-bezier(0.77, 0, 0.175, 1);\n\n$easeInQuint: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n$easeOutQuint: cubic-bezier(0.23, 1, 0.32, 1);\n$easeInOutQuint: cubic-bezier(0.86, 0, 0.07, 1);\n$easeInExpo: cubic-bezier(0.95, 0.05, 0.795, 0.035);\n$easeOutExpo: cubic-bezier(0.19, 1, 0.22, 1);\n$easeInOutExpo: cubic-bezier(1, 0, 0, 1);\n\n$easeInCirc: cubic-bezier(0.6, 0.04, 0.98, 0.335);\n$easeOutCirc: cubic-bezier(0.075, 0.82, 0.165, 1);\n$easeInOutCirc: cubic-bezier(0.785, 0.135, 0.15, 0.86);\n$easeInBack: cubic-bezier(0.6, -0.28, 0.735, 0.045);\n$easeOutBack: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n$easeInOutBack: cubic-bezier(0.68, -0.55, 0.265, 1.55);\n\n// `transition-timing-function`と`animation-timing-function`プロパティに指定する、\n// cubic-bezier() 関数記法で定義した、3次ベジェ曲線のタイミング関数です。\n// 実際の動きは、以下のサイトで確認できます。\n// https://matthewlein.com/ceaser/\n// easeは「ゆっくりと」、inは「始まる」、outは「終わる」に置き換えると想像しやすいです。\n// IE9は`cubic-bezier()`に対応していないので、フォールバックを指定してください。\n\n// linear：一定の速度で変化する\n$linear: cubic-bezier(0.25, 0.25, 0.75, 0.75) !default;\n\n// ease：開始時から急速に加速して、中盤から緩やかになる\n$ease: cubic-bezier(0.25, 0.1, 0.25, 1) !default;\n\n// ease-in：緩やかに始まり、次第に加速し、突然停止する\n$ease-in: cubic-bezier(0.42, 0, 1, 1) !default;\n$ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53) !default;\n$ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19) !default;\n$ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22) !default;\n$ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06) !default;\n$ease-in-sine: cubic-bezier(0.47, 0, 0.745, 0.715) !default;\n$ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035) !default;\n$ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335) !default;\n$ease-in-back: cubic-bezier(0.6, -0.28, 0.735, 0.045) !default;\n\n// ease-out：急速に始まり、次第に緩やかになっていく\n$ease-out: cubic-bezier(0, 0, 0.58, 1) !default;\n$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94) !default;\n$ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1) !default;\n$ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1) !default;\n$ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1) !default;\n$ease-out-sine: cubic-bezier(0.39, 0.575, 0.565, 1) !default;\n$ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1) !default;\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1) !default;\n$ease-out-back: cubic-bezier(0.175, 0.885, 0.32, 1.275) !default;\n\n// ease-in-out：緩やかに始まり、加速が緩やかになっていく\n$ease-in-out: cubic-bezier(0.42, 0, 0.58, 1) !default;\n$ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955) !default;\n$ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1) !default;\n$ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1) !default;\n$ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1) !default;\n$ease-in-out-sine: cubic-bezier(0.445, 0.05, 0.55, 0.95) !default;\n$ease-in-out-expo: cubic-bezier(1, 0, 0, 1) !default;\n$ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86) !default;\n$ease-in-out-back: cubic-bezier(0.68, -0.55, 0.265, 1.55) !default;\n\n// Animations\n// ==========================================================================\n$base-opacity: 0.7 !default;\n$base-duration: 0.5s !default;\n$base-timing: $ease !default;\n\n// Path\n// ==========================================================================\n$pathImages: '../images';\n\n// Breakpoint\n// ==========================================================================\n$breakpoints: (\n  'xxs': 360px,\n  'xs': 480px,\n  'sm': 576px,\n  'md': 768px,\n  'lg': 1024px,\n  'xl': 1280px,\n  'xxl': 1440px,\n) !default;\n\n// --- bootstrap ---\n// $breakpoints: (\n//   \"xs\": 375px,\n//   \"sm\": 576px,\n//   \"md\": 768px,\n//   \"lg\": 992px,\n//   \"xl\": 1200px,\n// ) !default;\n\n// --- tailwind css ---\n// $breakpoints: (\n//   \"xs\": 480px,\n//   \"sm\": 640px,\n//   \"md\": 768px,\n//   \"lg\": 1024px,\n//   \"xl\": 1280px,\n// ) !default;\n\n// Layer\n// ==========================================================================\n$layer: (\n  splash: 150,\n  modal: 100,\n  drawer: 50,\n  floating: 40,\n  gnav: 30,\n  header-logo: 30,\n  header-gradient: 26,\n  header-bg: 25,\n  header: 20,\n  title: 10,\n  default: 1,\n  decoration: -1,\n) !default;\n\n// ==========================================================================\n//  Mixin\n// ==========================================================================\n\n// Media\n// ==========================================================================\n// @desc - メディアクエリを挿入します。\n// @param {String} $textype - 第一引数に変数のキーワードを渡します。\n// @param {String} $bp1 - 第二引数に変数のキーワードを渡します。\n// @param {String} $bp2 - 第三引数に変数のキーワードを渡します。\n// @see - $breakpoint\n// @example scss - Usage\n// .hoge {\n//   margin: 1px;\n//   @include media(min,md) {\n//     margin: 1px;\n//   }\n// }\n// .fuga {\n//   @include media(max,md) {\n//     padding: 1px;\n//   }\n// }\n// .hoge-fuga {\n//   @include media(between, md , lg) {\n//     padding: 1px;\n//   }\n// }\n// @example css - CSS output\n// @media screen and (min-width: 768px) {\n//   .hoge {\n//     margin: 1px;\n//   }\n// }\n// @media screen and (max-width: 767.98px) {\n//   .fuga {\n//     padding: 1px;\n//   }\n// }\n// @media screen and (min-width: 768px) and (max-width: 931.98px) {\n//   .hoge-fuga {\n//     padding: 1px;\n//   }\n// }\n@mixin media($textype, $bp1, $bp2: 0) {\n  @if ($textype == min) {\n    @media screen and (min-width: #{map-get($breakpoints, $bp1)}), print {\n      @content;\n    }\n  } @else if ($textype == max) {\n    @media screen and (max-width: #{map-get($breakpoints, $bp1) - .02px }) {\n      @content;\n    }\n  } @else if ($textype == between) {\n    @media screen and (min-width: #{map-get($breakpoints, $bp1)}), print and (max-width: #{map-get($breakpoints, $bp2) - .02px }) {\n      @content;\n    }\n  } @else {\n    @error \"引数が間違っています。\" + \"正しい引数を設定してください。\";\n  }\n}\n\n//\n//  @mixin container-query\n//\n//  @description\n//  コンテナクエリーを作成するためのmixinです。\n//  @link https://zenn.dev/moneyforward/articles/css-container-query\n//\n//  @param {string} $name - セレクタ名\n//  @param {number} $width - 幅\n//  @param {string} [$rule=max-width] - ルール（max-widthまたはmin-width）\n//\n//  @example - scss\n// .container-query {\n//  @include container-query(my-container,md){\n//     max-width: 10px;\n//  }\n// }\n//\n//  @example - scss\n//  @container my-container (max-width: 768px) {\n//   .container-query {\n//     max-width: 10px;\n//   }\n// }\n//\n\n@mixin container-query($name, $bp1, $rule: max-width) {\n  @if $rule == max-width {\n    @container #{$name} (max-width: #{map-get($breakpoints, $bp1)}) {\n      @content;\n    }\n  } @else if $rule == min-width {\n    @container #{$name} (min-width: #{map-get($breakpoints, $bp1)}) {\n      @content;\n    }\n  }\n}\n\n// Hover\n// ==========================================================================\n// @desc - メディアクエリのhoverを挿入します。\n// @example scss - Usage\n// .foo {\n//   color: red;\n//   @include mq(tab) {\n//     color: blue;\n//   }\n// }\n// @example css - CSS output\n// .foo {\n//   color: red;\n// }\n// @media screen and (min-width: 768px) {\n//   .foo {\n//     color: blue;\n//   }\n// }\n@mixin hover() {\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n// このような書き方もある\n// @mixin hv($flag: true) {\n\n//   &:hover {\n//     transition: all .2s linear;\n\n//     @if $flag == true {\n//       opacity: .8;\n//     }\n//     @content;\n//   }\n// }\n\n///\n/// hover-styleミックスイン\n///\n/// ホバー時に指定されたコンテンツを適用します。\n///\n/// @param {boolean} [$disabled=false] - デフォルトはfalse。trueの場合、ホバーが無効化されます。\n///\n@mixin hover-style($disabled: false) {\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      @content;\n    }\n  }\n  @if $disabled {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n///\n/// focus-styleミックスイン\n///\n/// フォーカス時に指定されたコンテンツを適用します。\n///\n/// @example SCSS\n///   .my-element {\n///     @include focus-style {\n///       outline: 2px solid blue;\n///     }\n///   }\n///\n/// @example CSS\n///   .my-element:focus {\n///     outline: 2px solid blue;\n///   }\n///\n@mixin focus-style {\n  &:focus {\n    @content;\n  }\n}\n\n/// Focus-ring\n/// ==========================================================================\n/// @desc - focus-ringを挿入します。\n/// @link https://www.tam-tam.co.jp/tipsnote/html_css/post16551.html\n/// @link https://qiita.com/xrxoxcxox/items/82e083b3f47309873262\n/// @link https://yuheiy.hatenablog.com/entry/2017/08/28/185913\n/// @example scss - Usage\n/// .foo {\n///   color: red;\n///   @include mq(tab) {\n///     color: blue;\n///   }\n/// }\n/// @example css - CSS output\n/// .foo {\n///   color: red;\n/// }\n/// @media screen and (min-width: 768px) {\n///   .foo {\n///     color: blue;\n///   }\n/// }\n// @mixin focus-with-keyboard {\n//   html[data-whatinput='keyboard'] &:focus {\n//     @content;\n//   }\n// }\n\n// @mixin focus-without-keyboard {\n//   html[data-whatinput='initial'] &:focus,\n//   html[data-whatinput='mouse'] &:focus,\n//   html[data-whatinput='touch'] &:focus {\n//     @content;\n//   }\n// }\n\n// @mixin focus-clear {\n//   outline: none;\n// }\n\n// @mixin focus-clear-without-keyboard {\n//   @include focus-without-keyboard {\n//     @include focus-clear;\n//   }\n// }\n\n// Clearfix\n// ==========================================================================\n// @desc - クリアーフィックスのスタイルを挿入します。\n// @param {Bool, String} - 引数$importantに\"important\"を渡すと`!important`の指定ができます。\n// @example scss - Usage\n//\n// .foo { @include clearfix; }\n// .bar { @include clearfix(important); }\n//\n// @example css - CSS output\n// .foo:after {\n//   content: \"\";\n//   display: block;\n//   clear: both;\n// }\n// .bar:after {\n//   content: \"\" !important;\n//   display: block !important;\n//   clear: both !important;\n// }\n@mixin clearfix($important: false) {\n  @if ($important == 'important') {\n    $important: unquote('!important');\n  } @else {\n    $important: null;\n  }\n  &::after {\n    content: '' $important;\n    display: block $important;\n    clear: both $important;\n  }\n\n  &::before {\n    content: '' $important;\n    display: block $important;\n    clear: both $important;\n  }\n\n  display: block $important;\n}\n\n// Font-face\n// ==========================================================================\n// @desc - ダウンロードしたWebフォントをインポートします。\n// @see https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6#file-_mixins-scss\n// @param {String} $name - font-family名（クオーテーション推奨）\n// @param {String} $path - フォントファイルへの相対パス（クオーテーション推奨）\n// @param {String} $weight [null] - font-weight\n// @param {String} $style [null] - font-style\n// @param {String} $display [null] - font-display\n// @param {String} $exts [eot woff2 woff ttf svg] - 対応するフォントファイルの拡張子\n// @example scss - Usage\n// @include font-face(\"Open Sans\", \"font/OpenSans-Regular\", 400, normal, woff ttf);\n//\n// @example css - CSS output\n// @font-face {\n//   font-display: swap;\n//   font-family: \"Open Sans\";\n//   font-style: normal;\n//   font-weight: 400;\n//   src: url(\"font/OpenSans-Regular.woff\") format(\"woff\"), url(\"font/OpenSans-Regular.ttf\") format(\"truetype\");\n// }\n@mixin font-face($name, $path, $weight: null, $style: null, $display: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + str-replace($name, ' ', '_'),\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype',\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-weight: $weight;\n    font-style: $style;\n    src: $src;\n    font-display: $display;\n  }\n}\n\n// Full-bg\n// ==========================================================================\n// @desc  背景色だけをブラウザの横幅いっぱいに表示します。コンテンツは親コンテナに収まります。\n// @example scss - Usage\n// .full-width {\n//   @include full-bg();\n//   background-color: #eee;\n// }\n// @example css - CSS output\n// .full-bg {\n//   margin-right: calc(-50vw + 50%);\n//   margin-left: calc(-50vw + 50%);\n//   padding-right: calc(50vw - 50%);\n//   padding-left: calc(50vw - 50%);\n//   background-color: #eee;\n// }\n@mixin full-bg() {\n  margin-right: calc(-50vw + 50%);\n  margin-left: calc(-50vw + 50%);\n  padding-right: calc(50vw - 50%);\n  padding-left: calc(50vw - 50%);\n}\n\n// Full-width\n// ==========================================================================\n// @desc  ブラウザの横幅いっぱいに表示します。\n// @example scss - Usage\n// .full-width {\n//   @include full-width();\n// }\n// @example css - CSS output\n// .full-width {\n//   margin-right: calc(-50vw + 50%);\n//   margin-left: calc(-50vw + 50%);\n// }\n@mixin full-width() {\n  margin-right: calc(-50vw + 50%);\n  margin-left: calc(-50vw + 50%);\n}\n\n// Margin-auto\n// ==========================================================================\n// @desc  ブラウザの横幅いっぱいに表示します。\n// @example scss - Usage\n// .margin-auto {\n//   @include margin-auto();\n// }\n// @example css - CSS output\n// .margin-auto {\n//   margin-left: auto;\n//   margin-right: auto;\n// }\n@mixin margin-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n// Visually-hidden\n// ==========================================================================\n// @desc  ブラウザの横幅いっぱいに表示します。\n// @example scss - Usage\n// .visually-hidden {\n//   @include visually-hidden();\n// }\n// @example css - CSS output\n// .visually-hidden {\n//   clip: rect(0 0 0 0) !important;\n//   -webkit-clip-path: inset(50%) !important;\n//   border: 0 !important;\n//   clip-path: inset(50%) !important;\n//   height: 1px !important;\n//   margin: -1px !important;\n//   overflow: hidden !important;\n//   padding: 0 !important;\n//   position: absolute !important;\n//   white-space: nowrap !important;\n//   width: 1px !important;\n// }\n@mixin visually-hidden() {\n  border: 0 !important;\n  clip: rect(0 0 0 0) !important;\n  clip-path: inset(50%) !important;\n  height: 1px !important;\n  margin: -1px !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  white-space: nowrap !important;\n  width: 1px !important;\n}\n\n// ラインハイトの上下の余白を相殺\n// Lh\n// ==========================================================================\n// @desc - ラインハイトの上下の余白を相殺。\n// @link https://moshashugyo.com/media/line-height-space\n// @param    {Number} $line-height - ラインハイトの値。\n// @example scss - Usage\n// .lh {\n//   @include lh(2);\n// }\n// @example css - CSS output\n// .lh::before, .lh::after {\n//   content: \"\";\n//   display: block;\n//   height: 0;\n//   width: 0;\n// }\n// .lh::before {\n//   margin-top: calc((1 - 2) * 0.5em);\n// }\n// .lh::after {\n//   margin-bottom: calc((1 - 2) * 0.5em);\n// }\n@mixin lh($line-height) {\n  &::before,\n  &::after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n  }\n  &::before {\n    margin-top: calc((1 - #{$line-height}) * 0.5em);\n  }\n  &::after {\n    margin-bottom: calc((1 - #{$line-height}) * 0.5em);\n  }\n}\n\n// ==========================================================================\n//  Function\n// ==========================================================================\n\n// Strip-unit\n// ==========================================================================\n// @desc 単位を外す\n// @function strip-unit\n// @param    {Number} $number number to strip unit\n// @return   {Number} unitless number\n// @example\n//  strip-unit(-16px)        => -16\n//  strip-unit(0.5em)        => 0.5\n//  strip-unit(0.5cm + 10mm) => 1.5\n@function strip-unit($number) {\n  @if type-of($number) == 'number' and not unitless($number) {\n    @return math.div($number, ($number * 0 + 1));\n  }\n\n  @return $number;\n}\n\n// Divide-root\n// ==========================================================================\n// @desc - ルートのサイズを返す。\n// @param {Number} $px - 指定するピクセル値。\n// @see - $base-font-size-pc\n// @example - divide-root(20) => 1.25\n@function divide-root($px, $parent: 16) {\n  @return math.div(strip-unit($px), strip-unit($parent));\n}\n\n// Em\n// ==========================================================================\n// @desc - pxをemに変換します。\n// @param {Number} $px - 指定するピクセル値。\n// @param {Number} $parent [16] - 親要素のピクセル値。\n// @example - em(20) => 1.25em\n// @example - em(20, 15) => 1.33333em\n@function em($px, $parent: 16) {\n  @return math.div(strip-unit($px), strip-unit($parent)) * 1em;\n}\n\n// Px\n// ==========================================================================\n// @desc - emをpxに変換します。\n// @param {Number} $em - 指定するem値。\n// @param {Number} $parent [16] - 親要素のピクセル値。\n// @example - px(0.8) => 12.8px\n// @example - px(0.8, 15) => 12px\n@function px($em, $parent: 16) {\n  @return (strip-unit($em) * strip-unit($parent)) * 1px;\n}\n\n// Rem\n// ==========================================================================\n// @desc - pxをremに変換します。\n// @param {Number} $px - 指定するピクセル値。\n// @param {Number} $parent [16] - 親要素のピクセル値。\n// @example - rem(20) => 1.25rem\n// @example - rem(20, 15) => 1.33333rem\n@function rem($px, $parent: 16) {\n  @return math.div(strip-unit($px), strip-unit($parent)) * 1rem;\n}\n\n// Vw\n// ==========================================================================\n// @desc - pxをvwに変換します。\n// @param {Number} $window_width  - ウィンドウの幅。\n// @param {Number} $parent [16] - 親要素のピクセル値。\n// @example - rem(24) => 3.125vw\n// @example - rem(768, 24) => 4.2666666667vw\n@function vw($window_width: 768, $parent: 16) {\n  @return math.div(strip-unit($parent), strip-unit($window_width)) * 100vw;\n}\n\n// Fs\n// ==========================================================================\n// @desc - pxを%もしくはvwに変換します。\n// @param {Number} $size - 指定する画面幅。\n// @param {Number} $context - 指定するのピクセル値。\n// @param {String} $unit - 指定する単位。\n// @example - fs(10, 768, \"%\") => 1.3020833333%\n// @example - fs(10, 768, \"vw\") => 1.3020833333vw\n// @example - fs(10, 20, \"em\") => 0.5em\n@function fs($size, $context: 768, $unit: em) {\n  @if $unit == '%' {\n    @return #{math.div(strip-unit($size), strip-unit($context)) * 100}#{$unit};\n  } @else if $unit == 'vw' {\n    @return #{math.div(strip-unit($size), strip-unit($context)) * 100}#{$unit};\n  } @else {\n    @return #{math.div(strip-unit($size), strip-unit($context))}#{$unit};\n  }\n}\n\n// Z-index\n// ==========================================================================\n// @desc -z-indexを$layerから取り出す\n// @param {String} $z-index - してする文字列。\n// @example scss - Usage\n// .z-index {\n//   z-index: z-index(header);\n// }\n// @example css - CSS output\n// .z-index {\n//   z-index: 20;\n// }\n@function z-index($z-index) {\n  @return map-get($layer, $z-index);\n}\n\n// Breakpoints\n// ==========================================================================\n// @desc - デバイスサイズを$breakpointsから取り出す\n// @param {String} $size - 変数のキーワードを渡します。\n// @example scss - Usage\n// .breakpoints {\n//   margin: breakpoints(xs);\n// }\n// @example css - CSS output\n// .breakpoints {\n//   margin: 480px;\n// }\n@function bp($size) {\n  @return map-get($breakpoints, $size);\n}\n\n/// line-height\n/// ==========================================================================\n/// @desc -line-heightの計算\n/// @param {Number} $size - 指定する画面幅。\n/// @param {Number} $context - 指定するのピクセル値。\n/// @param {String} $unit - 指定する単位。\n/// @example - fs(10, 768, \"%\") => 1.3020833333%\n/// @example - fs(10, 768, \"vw\") => 1.3020833333vw\n/// @example - fs(10, 20, \"em\") => 0.5em\n@function l-height($height, $pixel) {\n  @return math.div($height, $pixel);\n}\n\n/// letter-spacing\n/// ==========================================================================\n/// @desc -letter-spacing計算\n/// @param {Number} $size - 指定する画面幅。\n/// @param {Number} $context - 指定するのピクセル値。\n/// @param {String} $unit - 指定する単位。\n/// @example - fs(10, 768, \"%\") => 1.3020833333%\n/// @example - fs(10, 768, \"vw\") => 1.3020833333vw\n/// @example - fs(10, 20, \"em\") => 0.5em\n@function l-spacing($spacing) {\n  @return math.div($spacing, 1000) * 1em;\n}\n\n// Calc-rem-container\n// ==========================================================================\n// @desc - border-boxで - containerの余白を含む計算(rem)\n// @param {Number $inner-width - 指定する画面幅\n// @param {Number $space - 指定するのピクセル値\n// @example scss - Usage\n// .calc-rem-container {\n//   width: calc-rem-container(10, 2);\n// }\n// @example css - CSS output\n// .calc-rem-container {\n//   width: 0.875rem;\n// }\n\n@function calc-rem-container($inner-width, $space) {\n  @return calc(rem($inner-width) + (rem($space) * 2));\n}\n\n// Fluid-size\n// ==========================================================================\n// @desc - clamp() で作る可変のフォントサイズ\n// @link https://firstlayout.net/fluidly-font-size-created-with-sass-and-clamp/\n// @link https://min-max-calculator.9elements.com/\n// @param {Number} $min-size - 引数に最小の値。\n// @param {Number} $max-size - 引数に最大の値。\n// @return clamp($min-unit, $calc-rem + $calc-vw, $max-unit)\n// @see - $breakpoint\n// @example scss - Usage\n// .fluid-size {\n//   font-size: fluid-size(24px, 60px);\n// }\n// px などの単位をはずしてもよい\n// .fluid-size {\n//   font-size: fluid-size(24, 60);\n// }\n// @example css - CSS output\n// .fluid-size {\n//   font-size: clamp(1.5rem, -0.2088607595rem + 5.6962025316vw, 3.75rem);\n// }\n@function fluid-size($min-size, $max-size) {\n  $min-unit: rem($min-size);\n  $max-unit: rem($max-size);\n  $min-num: divide-root($min-size);\n  $max-num: divide-root($max-size);\n  $min-breakpoint: divide-root(map.get($breakpoints, 'xxs'));\n  $max-breakpoint: divide-root(map.get($breakpoints, 'lg'));\n  $slope: math.div(($max-num - $min-num), ($max-breakpoint - $min-breakpoint));\n  $calc-rem: ($min-breakpoint * -1 * $slope + $min-num) * 1rem;\n  $calc-vw: ($slope * 100) * 1vw;\n  @return clamp($min-unit, $calc-rem + $calc-vw, $max-unit);\n}\n\n///\n/// column-width関数\n///\n/// グリッドシステムのカラム幅を計算します。\n///\n/// @link https://github.com/DesignSupply/startify-styles/blob/main/scss/foundation/_function.scss\n///\n/// @param $columns - カラム数を指定します。デフォルトは12です。\n/// @param $gap - カラム間の余白を指定します。デフォルトは0です。\n///\n/// @example SCSS\n///   .my-element {\n///     width: column-width(4, 20px);\n///   }\n///\n/// @example CSS\n///   .my-element {\n///     width: calc(33.3333% - 10px);\n///   }\n///\n@function column-width($columns: 12, $gap: 0) {\n  $width: 100%;\n\n  // カラム数が1の場合\n  @if $columns == 1 {\n    @if $gap == 0 {\n      $width: 8.3333%;\n    } @else {\n      $width: calc(8.3333% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が2の場合\n  @else if $columns == 2 {\n    @if $gap == 0 {\n      $width: 16.6666%;\n    } @else {\n      $width: calc(16.6666% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が3の場合\n  @else if $columns == 3 {\n    @if $gap == 0 {\n      $width: 25%;\n    } @else {\n      $width: calc(25% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が4の場合\n  @else if $columns == 4 {\n    @if $gap == 0 {\n      $width: 33.3333%;\n    } @else {\n      $width: calc(33.3333% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が5の場合\n  @else if $columns == 5 {\n    @if $gap == 0 {\n      $width: 41.6666%;\n    } @else {\n      $width: calc(41.6666% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が6の場合\n  @else if $columns == 6 {\n    @if $gap == 0 {\n      $width: 50%;\n    } @else {\n      $width: calc(50% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が7の場合\n  @else if $columns == 7 {\n    @if $gap == 0 {\n      $width: 58.3333%;\n    } @else {\n      $width: calc(58.3333% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が8の場合\n  @else if $columns == 8 {\n    @if $gap == 0 {\n      $width: 66.6666%;\n    } @else {\n      $width: calc(66.6666% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が9の場合\n  @else if $columns == 9 {\n    @if $gap == 0 {\n      $width: 75%;\n    } @else {\n      $width: calc(75% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が10の場合\n  @else if $columns == 10 {\n    @if $gap == 0 {\n      $width: 83.3333%;\n    } @else {\n      $width: calc(83.3333% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が11の場合\n  @else if $columns == 11 {\n    @if $gap == 0 {\n      $width: 91.6666%;\n    } @else {\n      $width: calc(91.6666% - calc($gap / 2));\n    }\n  }\n\n  // カラム数が12の場合\n  @else if $columns == 12 {\n    $width: 100%;\n  }\n  @return $width;\n}\n\n@mixin gradient($direction, $color-1, $color-2) {\n  background-image: linear-gradient($direction, $color-1, $color-2);\n}\n"]}